import logging
import resend
from typing import Dict, Any, Optional
from datetime import datetime
from ..config import settings

logger = logging.getLogger(__name__)

class ResendClient:
    """Resend API client for sending email alerts"""
    
    def __init__(self):
        if not settings.RESEND_API_KEY:
            raise ValueError("Resend API key not configured")
        
        resend.api_key = settings.RESEND_API_KEY
    
    def send_alert_email(
        self,
        recipient_email: str,
        recipient_name: str,
        job_url: str,
        failure_count: int,
        error_message: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Send email alert for job failure
        
        Args:
            recipient_email: Email address to send alert to
            recipient_name: Name of recipient
            job_url: URL that failed health check
            failure_count: Number of consecutive failures
            error_message: Error message from health check
            
        Returns:
            Dict with send result
        """
        subject = f"ðŸš¨ Health Check Alert: {job_url} is DOWN"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        html_content = f"""
        <h2>Health Check Alert</h2>
        <p><strong>URL:</strong> {job_url}</p>
        <p><strong>Status:</strong> DOWN</p>
        <p><strong>Consecutive Failures:</strong> {failure_count}</p>
        {f'<p><strong>Error:</strong> {error_message}</p>' if error_message else ''}
        <p><strong>Time:</strong> {timestamp}</p>
        <hr>
        <p>This alert was generated by your pingDaemon monitoring system.</p>
        <p>Please check your service and resolve the issue.</p>
        """
        
        text_content = f"""
        Health Check Alert
        
        URL: {job_url}
        Status: DOWN
        Consecutive Failures: {failure_count}
        {f'Error: {error_message}' if error_message else ''}
        Time: {timestamp}
        
        This alert was generated by your pingDaemon monitoring system.
        Please check your service and resolve the issue.
        """
        
        try:
            params = {
                "from": "pingDaemon Alert System <alerts@resend.dev>",
                "to": [recipient_email],
                "subject": subject,
                "html": html_content,
                "text": text_content,
            }
            
            email = resend.Emails.send(params)
            
            logger.info(f"Alert email sent successfully to {recipient_email}")
            return {
                'success': True,
                'message_id': email.get('id'),
                'status': 'sent'
            }
                
        except Exception as e:
            logger.error(f"Exception sending email: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'status': 'failed'
            }