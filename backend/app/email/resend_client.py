import logging
import resend
from typing import Dict, Any, Optional
from datetime import datetime
from ..config import settings

logger = logging.getLogger(__name__)

class ResendClient:
    """Resend API client for sending email alerts"""
    
    def __init__(self):
        if not settings.RESEND_API_KEY:
            raise ValueError("Resend API key not configured")
        
        resend.api_key = settings.RESEND_API_KEY
    
    def send_alert_email(
        self,
        recipient_email: str,
        recipient_name: str,
        job_url: str,
        failure_count: int,
        error_message: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        Send email alert for job failure
        
        Args:
            recipient_email: Email address to send alert to
            recipient_name: Name of recipient
            job_url: URL that failed health check
            failure_count: Number of consecutive failures
            error_message: Error message from health check
            
        Returns:
            Dict with send result
        """
        subject = f"üö® Health Check Alert: {job_url} is DOWN"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        html_content = f"""
        <h2>Health Check Alert</h2>
        <p><strong>URL:</strong> {job_url}</p>
        <p><strong>Status:</strong> DOWN</p>
        <p><strong>Consecutive Failures:</strong> {failure_count}</p>
        {f'<p><strong>Error:</strong> {error_message}</p>' if error_message else ''}
        <p><strong>Time:</strong> {timestamp}</p>
        <hr>
        <p>This alert was generated by your pingDaemon monitoring system.</p>
        <p>Please check your service and resolve the issue.</p>
        """
        
        text_content = f"""
        Health Check Alert
        
        URL: {job_url}
        Status: DOWN
        Consecutive Failures: {failure_count}
        {f'Error: {error_message}' if error_message else ''}
        Time: {timestamp}
        
        This alert was generated by your pingDaemon monitoring system.
        Please check your service and resolve the issue.
        """
        
        try:
            params = {
                "from": "pingDaemon Alert System <onboarding@resend.dev>",
                "to": [recipient_email],
                "subject": subject,
                "html": html_content,
                "text": text_content,
            }
            
            email = resend.Emails.send(params)
            
            logger.info(f"Alert email sent successfully to {recipient_email}")
            return {
                'success': True,
                'message_id': email.get('id'),
                'status': 'sent'
            }
                
        except Exception as e:
            error_msg = str(e) if str(e) else f"{type(e).__name__}: Unknown error"
            logger.error(f"Exception sending alert email: {error_msg}")
            logger.error(f"Exception type: {type(e).__name__}")
            logger.error(f"Email params: {params}")
            if hasattr(e, 'response'):
                logger.error(f"Response status: {getattr(e.response, 'status_code', 'N/A')}")
                logger.error(f"Response text: {getattr(e.response, 'text', 'N/A')}")
            return {
                'success': False,
                'error': error_msg,
                'error_type': type(e).__name__,
                'status': 'failed'
            }
    
    def send_password_reset_email(
        self,
        recipient_email: str,
        recipient_name: str,
        reset_token: str,
        base_url: str = None
    ) -> Dict[str, Any]:
        """
        Send password reset email
        
        Args:
            recipient_email: Email address to send reset link to
            recipient_name: Name of recipient (email address if no name)
            reset_token: Password reset token
            base_url: Frontend base URL for reset link
            
        Returns:
            Dict with send result
        """
        if base_url is None:
            base_url = settings.FRONTEND_URL
        reset_url = f"{base_url}/reset-password?token={reset_token}"
        subject = "Reset Your pingDaemon Password"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        html_content = f"""
        <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="margin: 0; font-size: 24px;">üîê Password Reset Request</h1>
                <p style="margin: 10px 0 0; opacity: 0.9;">pingDaemon Account Security</p>
            </div>
            
            <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                <p style="font-size: 16px; margin: 0 0 20px;">Hello,</p>
                
                <p style="margin: 0 0 20px;">We received a request to reset your password for your pingDaemon account associated with <strong>{recipient_email}</strong>.</p>
                
                <p style="margin: 0 0 30px;">If you made this request, click the button below to reset your password:</p>
                
                <div style="text-align: center; margin: 30px 0;">
                    <a href="{reset_url}" 
                       style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                              color: white; 
                              padding: 15px 30px; 
                              text-decoration: none; 
                              border-radius: 8px; 
                              font-weight: bold; 
                              display: inline-block;
                              box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);">
                        Reset My Password
                    </a>
                </div>
                
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 30px 0;">
                    <p style="margin: 0 0 10px; font-weight: bold; color: #495057;">‚ö†Ô∏è Important Security Information:</p>
                    <ul style="margin: 0; padding-left: 20px; color: #6c757d;">
                        <li>This link will expire in <strong>1 hour</strong></li>
                        <li>The link can only be used once</li>
                        <li>If you didn't request this reset, please ignore this email</li>
                    </ul>
                </div>
                
                <p style="margin: 20px 0 0; color: #6c757d; font-size: 14px;">
                    If the button doesn't work, you can copy and paste this link into your browser:<br>
                    <a href="{reset_url}" style="color: #667eea; word-break: break-all;">{reset_url}</a>
                </p>
                
                <hr style="border: none; border-top: 1px solid #e9ecef; margin: 30px 0;">
                
                <p style="margin: 0; color: #6c757d; font-size: 12px; text-align: center;">
                    This email was sent by your pingDaemon monitoring system at {timestamp}<br>
                    If you didn't request a password reset, please secure your account immediately.
                </p>
            </div>
        </div>
        """
        
        text_content = f"""
        Password Reset Request - pingDaemon
        
        Hello,
        
        We received a request to reset your password for your pingDaemon account associated with {recipient_email}.
        
        If you made this request, click the link below to reset your password:
        {reset_url}
        
        IMPORTANT SECURITY INFORMATION:
        - This link will expire in 1 hour
        - The link can only be used once  
        - If you didn't request this reset, please ignore this email
        
        Time: {timestamp}
        
        If you didn't request a password reset, please secure your account immediately.
        """
        
        try:
            params = {
                "from": "pingDaemon Security <onboarding@resend.dev>",
                "to": [recipient_email],
                "subject": subject,
                "html": html_content,
                "text": text_content,
            }
            
            email = resend.Emails.send(params)
            
            logger.info(f"Password reset email sent successfully to {recipient_email}")
            return {
                'success': True,
                'message_id': email.get('id'),
                'status': 'sent'
            }
                
        except Exception as e:
            logger.error(f"Exception sending password reset email: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'status': 'failed'
            }
    
    def send_status_change_email(
        self,
        recipient_email: str,
        recipient_name: str,
        job_url: str,
        previous_status: str,
        current_status: str,
        error_message: str = None,
        job_interval: int = 10,
        failure_threshold: int = 3
    ) -> Dict[str, Any]:
        """
        Send status change email directly (for fallback when Celery is unavailable)
        
        Args:
            recipient_email: Email address to send alert to
            recipient_name: Name of recipient
            job_url: URL that changed status
            previous_status: Previous status
            current_status: Current status
            error_message: Error message from health check
            job_interval: Check interval in minutes
            failure_threshold: Failure threshold
            
        Returns:
            Dict with send result
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
        
        # Determine email type and content
        if previous_status in ['healthy', 'unknown'] and current_status == 'unhealthy':
            # Service went down
            subject = f"üö® Service Down Alert: {job_url}"
            status_text = "DOWN"
            status_emoji = "üî¥"
        elif previous_status == 'unhealthy' and current_status == 'healthy':
            # Service recovered  
            subject = f"‚úÖ Service Restored: {job_url}"
            status_text = "RESTORED"
            status_emoji = "üü¢"
        elif previous_status == 'unknown' and current_status == 'healthy':
            # Service came online
            subject = f"‚úÖ Service Online: {job_url}"
            status_text = "ONLINE"
            status_emoji = "üü¢"
        else:
            # Generic status change
            subject = f"üìä Status Change: {job_url}"
            status_text = f"{previous_status.upper()} ‚Üí {current_status.upper()}"
            status_emoji = "üìä"
        
        # HTML email content
        html_content = f"""
        <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
                <h1 style="margin: 0; font-size: 24px;">{status_emoji} Status Change Alert</h1>
                <p style="margin: 10px 0 0; opacity: 0.9;">pingDaemon Monitoring System</p>
            </div>
            
            <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                <div style="text-align: center; margin-bottom: 30px;">
                    <h2 style="color: #667eea; margin: 0; font-size: 20px;">{status_text}</h2>
                </div>
                
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <p style="margin: 0 0 10px;"><strong>URL:</strong> <a href="{job_url}" style="color: #667eea;">{job_url}</a></p>
                    <p style="margin: 0 0 10px;"><strong>Previous Status:</strong> {previous_status.title()}</p>
                    <p style="margin: 0 0 10px;"><strong>Current Status:</strong> {current_status.title()}</p>
                    <p style="margin: 0 0 10px;"><strong>Check Interval:</strong> Every {job_interval} minutes</p>
                    <p style="margin: 0;"><strong>Failure Threshold:</strong> {failure_threshold} consecutive failures</p>
                </div>
                
                {f'<div style="background: #fee; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f56565;"><p style="margin: 0; color: #c53030;"><strong>Error Details:</strong> {error_message}</p></div>' if error_message else ''}
                
                <p style="text-align: center; margin: 30px 0 0; color: #6c757d; font-size: 14px;">
                    Alert generated at {timestamp}<br>
                    <a href="{settings.FRONTEND_URL}/monitors" style="color: #667eea;">View Dashboard</a>
                </p>
            </div>
        </div>
        """
        
        # Plain text email content
        text_content = f"""
        Status Change Alert - pingDaemon
        
        {status_text}
        
        URL: {job_url}
        Previous Status: {previous_status.title()}
        Current Status: {current_status.title()}
        Check Interval: Every {job_interval} minutes
        Failure Threshold: {failure_threshold} consecutive failures
        
        {f'Error Details: {error_message}' if error_message else ''}
        
        Alert generated at {timestamp}
        View Dashboard: {settings.FRONTEND_URL}/monitors
        """
        
        try:
            params = {
                "from": "pingDaemon Alert System <onboarding@resend.dev>",
                "to": [recipient_email],
                "subject": subject,
                "html": html_content,
                "text": text_content,
            }
            
            email = resend.Emails.send(params)
            
            logger.info(f"Status change email sent successfully to {recipient_email}: {status_text}")
            return {
                'success': True,
                'message_id': email.get('id'),
                'status': 'sent'
            }
                
        except Exception as e:
            logger.error(f"Exception sending status change email: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'status': 'failed'
            }